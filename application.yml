AWSTemplateFormatVersion: 2010-09-09

Parameters:
  EC2InstanceType:
    Description: InstanceTypeOfWebServer
    Type: CommaDelimitedList
    Default: "t2.nano, t2.micro, m1.small"

    # MasterUserPassword:
    #   Description: Password for RDS connection
    #   Type: String
    NoEcho: true
    # ParameterのPropertyに"NoEcho:true"を追加するとコンソールなどで表示した際に全て"*"で表示(視認できない)。
  KeyName:
    Description: Key Pair Name
    Type: String
    NoEcho: true

Resources:
  # **************************************************
  # EC2
  # **************************************************
  # 論理IDはResourceからインデントを下げる。
  WebServer1a:
    # TypeとPropertiesは論理IDからインデントを下げる。
    Type: AWS::EC2::Instance
    Properties:
      #Propertyの各項目はPropertiesからインデントを下げる。
      AvailabilityZone: !Sub "${AWS::Region}a"
      ImageId:
        "ami-0ca38c7440de1749a"
        # Required: Conditional
        #起動テンプレートのPropertyかImageIdのどちらかのPropertyでAMIのIDを指定
      InstanceType:
        !Select [0, !Ref EC2InstanceType]
        # デフォルト設定があるので、必須ではないが、m1.smallになってしまうので、変更しておく。
      KeyName:
        "hands-on"
        #EC2にログインするなら必要。「.pem」などの拡張子は記述しない。
      SecurityGroupIds:
        - !ImportValue SGwebServer
        #Required:　conditional　セキュリティーグループのIDをリスト形式で記載
      SubnetId: !ImportValue PublicSubnet1a
      # 何も設定しないとデフォルトサブネットで起動されるので、自分で設定したパブリックサブネットの値をインポート

  WebServer1c:
    Type: AWS::EC2::Instance
    Properties:
      AvailabilityZone: !Sub "${AWS::Region}c"
      ImageId: "ami-06631ebafb3ae5d34"
      InstanceType: !Select [0, !Ref EC2InstanceType]
      KeyName: !Ref KeyName
      SecurityGroupIds:
        - !ImportValue SGwebServer
      SubnetId: !ImportValue PublicSubnet1c
  # **************************************************
  # LoadBalancer
  # **************************************************
  MyALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    #Resource名"Elastic Load Balancing"はCLB。それ以外は、V2を選択
    Properties:
      Name: "MyALB"
      Scheme: "internet-facing"
      #内部/internal | インターネット/Internetーfacingから選択
      SecurityGroups:
        - !ImportValue SGwebServer
      #必須ではないが、リスト形式で値を記述
      Subnets:
        - !ImportValue PublicSubnet1a
        - !ImportValue PublicSubnet1c
      #SubnetMappingsかSubnetsのいずれかのPropertyでALBのサブネットを記述するのが必須
      Type: application
      #LoadBalancerの種類をapplication | gateway | networkから指定。何も指定しないとapplicationになる。
      # ****************************************
      # Load Balncer TargetGropup
      # ****************************************
  ALBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      #以下のPropertyでヘルスチェックの設定ができるが、デフォルト値で良い場合はスルーしてOK
      HealthCheckEnabled: true
      #HealthCheckTimeoutSecondsより大きいこと
      HealthCheckIntervalSeconds: 10
      # HealthCheckPath: "2"
      # HealthCheckPort: "traffic-port"
      HealthCheckProtocol: "HTTP"
      # HealthCheckTimeoutSeconds: Number #デフォルト値は5秒
      # HealthyThresholdCount: Number
      Name: "ALBtargetGroup"
      #ターゲットのインスタンスがトラフィックを受けるポート
      Port:
        80
        #Required: Conditional
        #Type: Integer
        #Minimum: 1
        #Maximum: 65535
      Protocol:
        "HTTP"
        #ALBの場合はサポートしているプロトコルがHTTPかHTTPSなのでいずれかを記載
        #Required: Conditional
        #Type: String
        #Allowed values: GENEVE | HTTP | HTTPS | TCP | TCP_UDP | TLS | UDP
      # ProtocolVersion: "String"
      # TargetGroupAttributes: TargetGroupAttributes
      TargetType: "instance"
      #ターゲットグループに登録するリソースのタイプをinstance | ip  | lambdaから選択。デフォルトはinstance。

      Targets:
        - Id: !Ref WebServer1a
          Port: 80
        - Id: !Ref WebServer1c
          Port: 80
        #Targetがinstanceの場合はインスタンスIDとターゲットがListenしているPort番号。HTTPなので80。
      VpcId: !ImportValue MyVpc
      #TargetがLambda以外の場合は記述必須。エクスポートされているVpcから参照
  # **********************************************
  #  Load Balancer Listener　
  # **********************************************
  ALBListner:
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    Properties:
      LoadBalancerArn: !Ref MyALB
      #どのLoadBalncerのListenerかをARNで指定。
      Port: 80
      Protocol: "HTTP"
      #上記2つでLoadBalncerがListenしているポート番号とプロトコルを指定
      DefaultActions:
        - TargetGroupArn: !Ref ALBTargetGroup
          Type:
            "forward"
            #ターゲットがLambda以外の場合は必須。authenticate-cognito | authenticate-oidc | fixed-response | forward | redirectから設定できる。
Outputs:
  ALBTargetGroup:
    Description: Target Group for ALB
    Value: !Ref ALBTargetGroup
    Export:
      Name: ALBTargetGroup-cfn
